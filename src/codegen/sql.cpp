
/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

#include "sql.hpp"

namespace sql {

// Generated from: src/sql/add_object.sql
const userver::storages::postgres::Query add_object = {
    R"-(
-- $1: new_object_t
with 
type_v as (
    INSERT INTO objects.types (name) 
    VALUES ($1.type_name)
    ON CONFLICT (name) DO UPDATE
    SET name = EXCLUDED.name
    RETURNING type_id, name
),
inserted as (
    INSERT INTO objects.objects(name, type_id, coordinates, created_at, token)
    SELECT $1.name, type_id, $1.coordinates, $1.created_at, $1.token
    FROM type_v
    ON CONFLICT(token) DO UPDATE
    SET token = EXCLUDED.token
    RETURNING object_id, name, type_id, coordinates, created_at
)
SELECT object_id, i.name, t.name, coordinates, created_at
FROM inserted i
JOIN type_v t ON i.type_id = t.type_id
)-",
    userver::storages::postgres::Query::Name("add_object"),
    userver::storages::postgres::Query::LogMode::kFull};

// Generated from: src/sql/get_all.sql
const userver::storages::postgres::Query get_all = {
    R"-(
-- $1: time
SELECT 
    object_id, o.name, t.name, coordinates, created_at
FROM 
    objects.objects o
JOIN 
    objects.types t ON t.type_id = o.type_id
)-",
    userver::storages::postgres::Query::Name("get_all"),
    userver::storages::postgres::Query::LogMode::kFull};

// Generated from: src/sql/group_by_time.sql
const userver::storages::postgres::Query group_by_time = {
    R"-(
-- $1: time
SELECT 
    (object_id, o.name, t.name, coordinates, created_at)::objects.object_t_v1 as obj, 
     CASE 
        WHEN created_at::date > ($1::date + INTERVAL '1 day')::date THEN 'later'
        -- Check if created_at is the day after the date part of $1
        WHEN created_at::date = ($1::date + INTERVAL '1 day')::date THEN 'tomorrow'
        -- Check if created_at is the same date as $1
        WHEN created_at::date = $1::date THEN 'today'
        -- Check if created_at is within the same week as $1
        WHEN extract(week from created_at::date) = extract(week from $1::date)
             AND extract(year from created_at::date) = extract(year from $1::date) THEN 'week'
        -- Check if created_at is within the same month as $1
        WHEN extract(month from created_at::date) = extract(month from $1::date)
             AND extract(year from created_at::date) = extract(year from $1::date) THEN 'month'
        -- Check if created_at is within the same year as $1
        WHEN extract(year from created_at::date) = extract(year from $1::date) THEN 'year'
        ELSE 'earlier'
    END as time_frame
FROM 
    objects.objects o
JOIN 
    objects.types t ON t.type_id = o.type_id
ORDER BY
    created_at DESC)-",
    userver::storages::postgres::Query::Name("group_by_time"),
    userver::storages::postgres::Query::LogMode::kFull};

} // namespace sql
